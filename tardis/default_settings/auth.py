USER_PROVIDERS = (
    'tardis.tardis_portal.auth.localdb_auth.DjangoUserProvider',
)

GROUP_PROVIDERS = (
    'tardis.tardis_portal.auth.localdb_auth.DjangoGroupProvider',
    'tardis.tardis_portal.auth.token_auth.TokenGroupProvider',
)

# AUTH_PROVIDERS entry format:
# ('name', 'display name', 'backend implementation')
#   name - used as the key for the entry
#   display name - used as the displayed value in the login form
#   backend implementation points to the actual backend implementation
#
#   In most cases, the backend implementation should be a fully
#   qualified class name string, whose class can be instantiated without
#   any arguments.  For LDAP authentication, the
#       'tardis.tardis_portal.auth.ldap_auth.LDAPBackend'
#   class can't be instantiated without any arguments, so the
#       'tardis.tardis_portal.auth.ldap_auth.ldap_auth'
#   wrapper function should be used instead.
#
# We will assume that localdb will always be a default AUTH_PROVIDERS entry

AUTH_PROVIDERS = (
    ('localdb', 'Local DB',
     'tardis.tardis_portal.auth.localdb_auth.DjangoAuthBackend'),
)


AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',
    'tardis.tardis_portal.auth.authorisation.ACLAwareBackend',
    'django_cas_ng.backends.CASBackend',
)

MANAGE_ACCOUNT_ENABLED = True

AUTOGENERATE_API_KEY = False
'''
Generate a tastypie API key with user post_save
(tardis/tardis_portal/models/hooks.py)
'''

# default authentication module for experiment ownership user during
# ingestion? Must be one of the above authentication provider names
DEFAULT_AUTH = 'localdb'

AUTH_PROFILE_MODULE = 'tardis_portal.UserProfile'

# New users are added to these groups by default.
NEW_USER_INITIAL_GROUPS = []

# Turn on/off the self-registration link and form
REGISTRATION_OPEN = False
# or disable registration app (copy to your settings.py first!)
# INSTALLED_APPS = filter(lambda x: x != 'registration', INSTALLED_APPS)
ACCOUNT_ACTIVATION_DAYS = 3

# ---------------------------------
# Log In Method settings
# ---------------------------------
''' Sets the label of the login method used by the default login button on
the portal_template. Options are defined in LOGIN_METHODS.
'''

LOGIN_FRONTEND_DEFAULT = "local"

''' The home organization is used for the stripping the domain from emails to
identify the organization user id.
'''
LOGIN_HOME_ORGANIZATION = ''

SESSION_EXPIRE_AT_BROWSER_CLOSE = False

''' LOGIN_METHODS define the different methods that are supported by the
multi-modal interface. By default only the localdb login is enabled.
Fields include: label, display name, is method enabled.
'''
LOGIN_FRONTENDS = {
   'local': {'label':'Local',      'enabled':True },
   'aaf':   {'label':'AFF',        'enabled':False },
   'aafe':  {'label':'HOME',       'enabled':False },
   'cas':   {'label':'CAS Server', 'enabled':False },
   'http':  {'label':'HTTP',       'enabled':False },
}

# CAS Server default settings
''' CAS SERVER configuration parameters...
server_url: the base url of the CAS Service.
service_url: the base url of the mytardis instance.
logout_completely: set to false to enable single sign-on (sso) sessions.
'''
CAS_SERVER_URL = 'https//<url of the CAS Service>/'
CAS_SERVICE_URL = 'http://<url of the tardis instance>/'
CAS_LOGOUT_COMPLETELY = True
CAS_IGNORE_REDIRECT = True
CAS_IGNORE_REFERRER = True

# Show the Rapid Connect login button.
''' AAF RAPID CONNECT configuration parameters...
iss: 'https://rapid.test.aaf.edu.au' or 'https://rapid.aaf.edu.au'
aud: the service URL entered as part of the AAF registation process.
secret: key entered as part of the AAF registration process.
authnrequesst_url: the url generated by AAF as confirmation of successful
service registration,
e.g. 'https://rapid.test.aaf.edu.au/jwt/authnrequest/research/XXXXXXXXXXXXXXXX'

NOTE: when registering the service use the following callback url:
     'https://<url of the mytardis instance>/rc/auth/jwt/'

NOTE: if set the LOGIN_PRINCIPAL_DOMAIN will be stripped from the
      edupersonprincipalname to extract the user id within the domain.
      eg. set the domain to 'example.com' to convert 'u99999@example.com'
      into a user id of 'u99999'.
'''
RAPID_CONNECT_ENABLED = False
RAPID_CONNECT_CONFIG = {}
RAPID_CONNECT_CONFIG['iss'] = 'https://rapid.test.aaf.edu.au'
RAPID_CONNECT_CONFIG['aud'] = 'https://<url of the tardis instance>/'
RAPID_CONNECT_CONFIG['secret'] = 'CHANGE_ME'
RAPID_CONNECT_CONFIG['authnrequest_url'] = 'CHANGE_ME'
RAPID_CONNECT_CONFIG['entityID'] = 'OPTIONAL'
